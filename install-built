#!/bin/bash

SCRIPTPATH="$(dirname "`readlink -f $0`")"
source "$SCRIPTPATH/common.sh" || exit 1

need_binaries scp ssh
load_config
check_config IGNORE_PACKAGES="-devel -tests -doc" INSTALL_USER="root" INSTALL_HOST="192.168.2.15"

script_version="1"
current_dir="$PWD"
rpms_dir=
to_copy=
to_install=
install_opts=
wildcards=$@
remote="$INSTALL_USER@$INSTALL_HOST"

print_usage() {
    echo "$(basename $0) v$script_version"
    echo ""
    echo "  Configuration can be saved to config file to avoid using arguments,"
    echo "  in $COMMON_CONFIG_LOCATION"
    echo ""
    echo "  --help                  Print this help"
    echo "  -h|--host <value>       Which host to install to"
    echo "                              current INSTALL_HOST=$INSTALL_HOST"
    echo "  -u|--user <value>       Which user to use when installing [default $INSTALL_USER]"
    echo "                              current INSTALL_USER=$INSTALL_USER"
    echo "  -i|--ignore \"<value>\"   Packages to ignore when installing"
    echo "                            Whitespace separated list of strings that are used to ignore"
    echo "                            packages when installing. Strings are matched to any part of the"
    echo "                            package name, so for example ignore value \"devel\" will"
    echo "                            match foo-devel-0.1.rpm."
    echo "                              current IGNORE_PACKAGES=\"$IGNORE_PACKAGES\""
}

while [ $# -gt 0 ]; do
    case "$1" in
        --help)
            print_usage
            exit 0
            ;;
        -h|--host)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for host."
                exit 1
            fi
            INSTALL_HOST="$1"
            ;;
        -u|--user)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for user."
                exit 1
            fi
            INSTALL_USER="$1"
            ;;
        -i|--ignore)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for ignore."
                exit 1
            fi
            IGNORE_PACKAGES="$1"
            ;;
    esac

    shift
done

# search rpm output directory...
while [ "$PWD" != "/" ]; do
    if [ -d "RPMS" ]; then
        rpms_dir="$PWD/RPMS"
        break
    fi
    cd ..
done

cd "$current_dir"

if [ ! -d "$rpms_dir" ]; then
    echo "Could not find RPMS directory."
    exit 1
fi

if [ $(ls "$rpms_dir" | grep \.rpm | wc -l) -eq 0 ]; then
    echo "No packages in $rpms_dir"
    exit 2
fi

for package in "$rpms_dir/"*.rpm; do
    fname="$(basename $package)"
    skip=0
    for i in $IGNORE_PACKAGES; do
        if [[ "$fname" == *"${i}"* ]]; then
            skip=1
            break
        fi
    done
    if [ $skip -eq 1 ]; then
        continue
    fi

    if [ "$wildcards" != "" ]; then
        install_opts="--nodeps"
        for w in $wildcards; do
            if [[ "$fname" == *"$w"* ]]; then
                to_copy="$to_copy $package"
                to_install="$to_install $fname"
            fi
        done
    else
        to_copy="$to_copy $package"
        to_install="$to_install $fname"
    fi
done

if [ "$to_copy" == "" ]; then
    echo "No files to install."
    exit 1
fi

# first copy...
scp -q $to_copy $remote:/tmp

# then install and delete...
ssh -q $remote "cd /tmp && rpm -v -U $install_opts --force $to_install ; rm -f $to_install"
