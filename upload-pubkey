#!/bin/bash

# v7:
#   - Set default user to "defaultuser".
#
# v6:
#   - Add help page.
#
# v5:
#   - Add -s|--scripts option to only run extra scripts from upload-pubkey.d
#     directory. Add bash autocompletion support.
#
# v4:
#   - Default values for variables are read from $HOME/.config/upload-pubkey
#     file if the file exists.
#
# v3:
#   - Add possibility to execute user defined scripts after uploading keys
#     If executable files are found in $HOME/.config/upload-pubkey.d directory
#     they are all executed (in random order) if key upload was successful.
#     This can be used for example to set target environment properly, etc.
#     When the scripts are executed the environment will contain values in
#     variables USE_KEY, USE_USER, USE_HOST, SSH_OPT as defined when uploading
#     the keys.
#
# v2:
#   - use sshpass if available so that password needs to be typed only once
#   - provide the password to devel-su from stdin to avoid visible password

SCRIPT_VERSION=7
DEFAULT_KEY="$HOME/.ssh/id_rsa.pub"
DEFAULT_USER="defaultuser"
DEFAULT_HOST="192.168.2.15"
DEFAULT_RUN_SCRIPTS="1"
DEFAULT_CONFIG="$HOME/.config/upload-pubkey"
EXECUTE_D="$DEFAULT_CONFIG.d"

SSH_OPT="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
USE_KEY="$DEFAULT_KEY"
USE_USER="$DEFAULT_USER"
USE_HOST="$DEFAULT_HOST"
RUN_SCRIPTS="$DEFAULT_RUN_SCRIPTS"

ONLY_RUN_SCRIPTS=0
USE_SSHPASS="$(which sshpass)"

if [ -e "$DEFAULT_CONFIG" ]; then
    source "$DEFAULT_CONFIG"
fi

debug_print() {
    if [ -n "$DEBUG" ]; then
        echo "$@"
    fi
}

quiet_ssh() {
    if [ -z "$DEBUG" ]; then
        echo -n "-q"
    fi
}

extra_scripts() {
    if [ $RUN_SCRIPTS != 1 ]; then
        return
    fi

    if [ -d "$EXECUTE_D" ]; then
        debug_print "script directory ($EXECUTE_D) exists."
        for i in $(ls -1 "$EXECUTE_D" | sort); do
            debug_print "found file $i ($(stat --format '%a' "$EXECUTE_D/$i")) in execute dir"
            script="$EXECUTE_D/$i"
            if [ -x "$script" ]; then
                debug_print "run $(basename $script)..."
                DEBUG="$DEBUG" \
                    USE_KEY="$USE_KEY" \
                    USE_USER="$USE_USER" \
                    USE_HOST="$USE_HOST" \
                    SSH_OPT="$SSH_OPT" \
                    $script
            fi
        done
    fi
}

print_help() {
    echo "$(basename $0) v$SCRIPT_VERSION"
    echo ""
    echo "Usage: upload-pubkey [options]"
    echo ""
    echo "  If sshpass executable is found in PATH that is used for password input, so that the"
    echo "  password needs to be typed only once. Otherwise user needs to type password twice."
    echo ""
    echo "  Defaults for options host, key, and user (USE_HOST, USE_KEY, USE_USER, respectively)"
    echo "  can be defined in global configuration file ($DEFAULT_CONFIG)."
    echo ""
    echo "  If script directory contains scripts with executable bit set they are run after"
    echo "  successful public key upload, or separately with the --scripts argument. When"
    echo "  the scripts are run their environment will contain variables USE_HOST, USE_KEY, USE_USER"
    echo "  with the same values as when running this script (from $EXECUTE_D)."
    echo ""
    echo "    -v --verbose        Print some debug logging when running."
    echo "       --help           Print this help."
    echo "    -k --key            Use specific public key for uploading (default $USE_KEY)."
    echo "    -h --host           Which host to upload the public key (default $USE_HOST)."
    echo "    -u --user           Which user to use for connecting (default $USE_USER)."
    echo "    -s --scripts        Only run extra scripts (from $EXECUTE_D)."
    echo "    -n --no-scripts     Do not run extra scripts."
    echo "                          Default for running scripts can also be controlled with"
    echo "                          config value RUN_SCRIPTS (default $RUN_SCRIPTS)."
    echo ""
}

while [ $# -gt 0 ]; do
    case "$1" in
        -v|--verbose)
            DEBUG=1
            ;;
        --help)
            print_help
            exit 0
            ;;
        --autocomplete)
            echo "-v --verbose --help -k --key -h --host -u --user -s --scripts -n --no-scripts"
            exit 0
            ;;
        -k|--key)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for pubkey."
                exit 1
            fi
            USE_KEY="$1"
            ;;
        -h|--host)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for host."
                exit 1
            fi
            USE_HOST="$1"
            ;;
        -u|--user)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for user."
                exit 1
            fi
            USE_USER="$1"
            ;;
        -s|--scripts)
            ONLY_RUN_SCRIPTS=1
            ;;
        -n|--no-scripts)
            RUN_SCRIPTS=0
            ;;
    esac

    shift
done

if [ $ONLY_RUN_SCRIPTS -eq 1 ]; then
    RUN_SCRIPTS=1
    extra_scripts
    exit 0
fi

if [ ! -f "$USE_KEY" ]; then
    echo "Key \"$USE_KEY\" not found."
    exit 1
fi

SCRIPT="upload-pubkey-$(date +%s)$RANDOM.tmp"
SCRIPT_DATA=""
REMOTE_SCRIPT="/home/$USE_USER/.$SCRIPT"

finish() {
    unset SSHPASS
    unset SCRIPT_DATA
}

trap finish EXIT

INPUT_PASS=""
echo -n "($(basename $0)) $USE_USER@$USE_HOST's password: "
read -s SSHPASS
export SSHPASS

SCRIPT_DATA="#!/bin/bash
#PASSW $SSHPASS
mkdir -p ~/.ssh
echo \"$(cat $USE_KEY)\" >> ~/.ssh/authorized_keys
chmod -R go-rwx ~/.ssh"

if [ -n "$USE_SSHPASS" ]; then
    echo ""
    debug_print "using sshpass for password propagation."
    INPUT_PASS="$USE_SSHPASS -e"
else
    echo -e "\nretype password..."
fi

echo -e "$SCRIPT_DATA" | $INPUT_PASS ssh $(quiet_ssh) $SSH_OPT $USE_USER@$USE_HOST "cat > $REMOTE_SCRIPT ; bash $REMOTE_SCRIPT ; grep \#PASSW $REMOTE_SCRIPT | cut -b8- | devel-su -c bash $REMOTE_SCRIPT 2>/dev/null ; rm -f $REMOTE_SCRIPT"

if [ $? -eq 0 ]; then
    extra_scripts
    debug_print "done."
else
    echo "upload failed."
    exit 1
fi
