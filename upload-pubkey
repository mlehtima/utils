#!/bin/bash

# v2:
#   - use sshpass if available so that password needs to be typed only once
#   - provide the password to devel-su from stdin to avoid visible password

DEFAULT_KEY="$HOME/.ssh/id_rsa.pub"
DEFAULT_USER="nemo"
DEFAULT_HOST="192.168.2.15"
EXECUTE_D="$HOME/.config/upload-pubkey.d"

SSH_OPT="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
USE_KEY="$DEFAULT_KEY"
USE_USER="$DEFAULT_USER"
USE_HOST="$DEFAULT_HOST"
USE_SSHPASS="$(which sshpass)"

while [ $# -gt 0 ]; do
    case "$1" in
        -k|--key)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for pubkey."
                exit 1
            fi
            USE_KEY="$1"
            ;;
        -h|--host)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for host."
                exit 1
            fi
            USE_HOST="$1"
            ;;
        -u|--user)
            shift
            if [ $# -lt 1 ]; then
                echo "Parameter missing for user."
                exit 1
            fi
            USE_USER="$1"
            ;;
    esac

    shift
done

if [ ! -f "$USE_KEY" ]; then
    echo "Key \"$USE_KEY\" not found."
    exit 1
fi

SCRIPT="upload-pubkey-$(date +%s)$RANDOM.tmp"
SCRIPT_DATA=""
REMOTE_SCRIPT="/home/$USE_USER/.$SCRIPT"

function finish {
    unset SSHPASS
    unset SCRIPT_DATA
}

trap finish EXIT

INPUT_PASS=""
echo -n "($(basename $0)) $USE_USER@$USE_HOST's password: "
read -s SSHPASS
export SSHPASS

SCRIPT_DATA="#!/bin/bash
#PASSW $SSHPASS
mkdir -p ~/.ssh
echo \"$(cat $USE_KEY)\" >> ~/.ssh/authorized_keys
chmod -R go-rwx ~/.ssh"

if [ ! -z "$USE_SSHPASS" ]; then
    INPUT_PASS="$USE_SSHPASS -e"
else
    echo -e "\nRetype password..."
fi

echo -e "$SCRIPT_DATA" | $INPUT_PASS ssh $SSH_OPT $USE_USER@$USE_HOST "cat > $REMOTE_SCRIPT ; chmod go-rwx,u+x $REMOTE_SCRIPT ; $REMOTE_SCRIPT ; grep \#PASSW $REMOTE_SCRIPT | cut -b8- | devel-su -c $REMOTE_SCRIPT 2>/dev/null; rm -f $REMOTE_SCRIPT"

if [ $? -eq 0 ]; then
    if [ -d "$EXECUTE_D" ]; then
        for i in $(ls -1 "$EXECUTE_D" | sort); do
            script="$EXECUTE_D/$i"
            if [ -x "$script" ]; then
                USE_KEY="$USE_KEY" USE_USER="$USE_USER" USE_HOST="$USE_HOST" SSH_OPT="$SSH_OPT" $script
            fi
        done
    fi
    echo "done."
fi
