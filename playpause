#!/bin/bash

# Requires spotify control script (sp) and/or music-on-console player (mocp)

SCRIPT_VERSION=1.2.0

LAST_PLAYING_FILE="/tmp/$USER-playpause-lastplaying.tmp"
LAST_PLAYING=
SPOT_RUNNING=0
SPOT_PLAYING=0
MOCP_RUNNING=0
MOCP_PLAYING=0

case $1 in
    -v|--version)
        echo "$(basename $0) v$SCRIPT_VERSION"
        exit 0
        ;;
    -h|--help)
        echo "$(basename $0) v$SCRIPT_VERSION"
        echo ""
        echo "Control either music-on-console or spotify based on"
        echo "which was last playing. Without arguments running $(basename $0)"
        echo "toggles play/pause. In addition there are options for"
        echo "additional actions."
        echo ""
        echo "  --next      Play next track (b)"
        echo "  --prev      Play previous track (b)"
        echo "  --ff        Fast forward 30 seconds (m)"
        echo "  --info      Use dmenu to display information about"
        echo "              currently playing song"
        echo ""
        echo " (command supported with music-on-console (m),"
        echo "  spotify (s) or both (b))"
        echo ""
        exit 0
        ;;
esac

# check if Spotify is running and playing
sp status >/dev/null
if [ $? -eq 0 ]; then
    SPOT_RUNNING=1
    [ "$(sp status)" == "Playing" ] && SPOT_PLAYING=1
fi

# check if MOCP is running and playing
if [ ! -z "$(pidof mocp)" ]; then
    MOCP_RUNNING=1
    [ "$(mocp -i | grep State | cut -d' ' -f2)" == "PLAY" ] && MOCP_PLAYING=1
fi

if [ -f "$LAST_PLAYING_FILE" ]; then
    LAST_PLAYING="$(cat $LAST_PLAYING_FILE)"
fi

_get_filename() {
    local _r=
    case $LAST_PLAYING in
        mocp)       _r="$(mocp -Q %file)"                               ;;
        spotify)    _r="<shouldn't see this>"                           ;;
    esac
    printf -v "$1" %s "$_r"
}

_get_track_info() {
    local _var_artist=$1
    local _var_album=$2
    local _var_track=$3

    local _found=0
    local _str=

    case $LAST_PLAYING in
        mocp)       _str="$(mocp -Q %artist)"                           ;;
        spotify)    _str="$(sp current | grep '^Artist' | cut -b14-)"   ;;
    esac
    printf -v "$_var_artist" %s "$_str"
    if [ -n "$_str" ]; then ((++_found)); fi

    case $LAST_PLAYING in
        mocp)       _str="$(mocp -Q %album)"                            ;;
        spotify)    _str="$(sp current | grep '^Album ' | cut -b14-)"   ;;
    esac
    printf -v "$_var_album" %s "$_str"
    if [ -n "$_str" ]; then ((++_found)); fi

    case $LAST_PLAYING in
        mocp)       _str="$(mocp -Q %song)"                             ;;
        spotify)    _str="$(sp current | grep '^Title' | cut -b14-)"    ;;
    esac
    printf -v "$_var_track" %s "$_str"
    if [ -n "$_str" ]; then ((++_found)); fi

    if [ $_found -eq 0 ]; then
        return 1
    fi
    return 0
}

_get_position() {
    local _r=
    case $LAST_PLAYING in
        mocp)       _r="$(mocp -Q '%ct/%tt')"                           ;;
        spotify)    _r=""                                               ;;
    esac
    printf -v "$1" %s "$_r"
    if [ -n "$_r" ]; then return 0; else return 1; fi
}

_set_value() {
    local _var=$1
    local _test="$2"
    local _val="$3"
    local _if_empty="$4"
    if [ -n "$_test" ]; then
        printf -v "$_var" %s "$_val"
    else
        if [ -n "$_if_empty" ]; then
            printf -v "$_var" %s "$_if_empty"
        fi
    fi
}


_play_next() {
    case $LAST_PLAYING in
        mocp)       mocp --next                                         ;;
        spotify)    sp next                                             ;;
    esac
}

_play_prev() {
    case $LAST_PLAYING in
        mocp)       mocp --previous                                     ;;
        spotify)    sp prev                                             ;;
    esac
}

_play_pause() {
    case $LAST_PLAYING in
        mocp)       mocp --toggle-pause                                 ;;
        spotify)    sp play                                             ;;
    esac
}

_next_play_state() {
    local _r=
    case $LAST_PLAYING in
        mocp)       [ $MOCP_PLAYING -eq 1 ] && _r="pause" || _r="play"  ;;
        spotify)    [ $SPOT_PLAYING -eq 1 ] && _r="pause" || _r="play"  ;;
    esac
    printf -v "$1" %s "$_r"
}

case $1 in
    --next)
        _play_next
        exit 0
        ;;
    --prev)
        _play_prev
        exit 0
        ;;
    --ff)
        [ $MOCP_PLAYING -eq 1 ] && mocp -k 30
        exit 0
        ;;
    --info)
        if [[ $MOCP_RUNNING -eq 1 || $SPOT_RUNNING -eq 1 ]]; then
            if which dmenu >/dev/null; then
                _output=""
                if _get_track_info _artist _album _track; then
                    _set_value _output "$_artist"   "$_artist"              "<Unknown artist>"
                    _set_value _output "$_track"    "$_output - $_track"    "$_output - <Unknown track>"
                    _set_value _output "$_album"    "$_output ($_album)"
                else
                    _get_filename _output
                    if [[ "$_output" == "$HOME/"* ]]; then
                        _output="${_output/${HOME/\//\\/}/\~}"
                    fi
                fi
                if _get_position _position; then
                    _output="$_output [$_position]"
                fi
                _cmds=""
                _next_play_state _cmds
                _cmds="${_cmds}\nnext\nprevious\n"
                _cmd=$(echo -e "${_cmds}>> ${_output} <<" | dmenu -l 4 -fn "Droid Sans Mono-20")
                case $_cmd in
                    play|pause) _play_pause ;;
                    previous)   _play_prev  ;;
                    next)       _play_next  ;;
                esac
            fi
        fi
        exit 0
        ;;
esac

if [ $SPOT_PLAYING -eq 1 ]; then
    LAST_PLAYING="spotify"
fi

if [ $MOCP_PLAYING -eq 1 ]; then
    LAST_PLAYING="mocp"
fi

if [ -n "$LAST_PLAYING" ]; then
    echo "$LAST_PLAYING" > "$LAST_PLAYING_FILE"
fi

_play_pause
