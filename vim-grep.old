#!/bin/bash

# Works with any editor but best with vim :)
#
# Add to your .vimrc:
#
# au BufRead *.gitopenbuffer set filetype=gitopenbuffer
# au BufRead *.gitopenbuffer hi openbuffer_left ctermfg=lightblue
# au BufRead *.gitopenbuffer syn match openbuffer_left /\zs.*:[0-9]*: \ze/
# autocmd FileType gitopenbuffer map <buffer> t ^<C-w>gF
# autocmd FileType gitopenbuffer map <buffer> j <Down> ^
# autocmd FileType gitopenbuffer map <buffer> k ^<Backspace><Backspace>^
# autocmd FileType gitopenbuffer map <buffer> q :q!<CR>
# autocmd FileType gitopenbuffer map <buffer> <ENTER> ^gF
#
# If using just git for grepping use following:
#
# command! -nargs=* -complete=shellcmd G tabnew | setlocal filetype=gitopenbuffer buftype=nofile bufhidden=hide noswapfile | r !vim-grep "<args>"
# nnoremap <C-F> :G <C-R><C-W><CR>
#
# With silversearcher-ag you can use:
#
# command -nargs=* G :Ack! <args>
# nnoremap <C-F> :Ack! <C-R><C-W><CR>
#
# With this configuration it is possible to invoke grepping from inside vim with command :G
# or by over any text under cursor with keyboard Ctrl+F

SCRIPTPATH="$(dirname "`readlink -f $0`")"
source "$SCRIPTPATH/common.sh" || exit 1

SCRIPT_VERSION="1.4.0"
expect_common_version 3
load_config
check_config EDITOR=less FORCE_GREP=0 IGNORE_CASE=0 USE_AG=0
if [ $USE_AG -eq 1 ]; then
    need_binaries ag
else
    need_binaries git grep
fi

print_usage() {
    echo "$(basename $0) v$SCRIPT_VERSION"
    echo ""
    echo "  Configuration can be saved to config file to avoid using arguments,"
    echo "  in $COMMON_CONFIG_LOCATION"
    echo ""
    echo "  -h|--help               Print this help"
    echo "  -g|--grep               Use grep even when grepping from git tree"
    echo "  -i|--ignore-case        Use case insensitive grepping"
    echo "  -e|--editor             Override default editor used to view results"
    echo "                            (default: $EDITOR)"
    echo ""
    exit 0
}

args_missing() {
    case $1 in
        EDITOR)
            echo "fatal: value missing for editor"
            exit 1      ;;
        *)
            echo "fatal: no pattern given. $1"
            # same exit code as with git grep
            exit 128    ;;
    esac
}

handle_options \
    "default:           handle_options_store_to = search  " \
    "min-arguments:     1                                 " \
    "missing:           args_missing                      " \
    "-h,--help,         0,  print_usage                   " \
    "-g,--grep,         0,  FORCE_GREP                    " \
    "-e,--editor,       1,  EDITOR                        " \
    "-i,--ignore-case,  0,  IGNORE_CASE                   " \
    ---                                                     \
    "$@"

# Check editor after handling options to take override into account
need_binaries $EDITOR

result=""

print_log() {
    # only print when outside vim
    if [ -z "$VIMRUNTIME" ]; then
        echo -e -n "${last_log//?/ }\r"
        last_log="$@"
        echo -e -n "$last_log\r"
    fi
}

write_output() {
    # write to file when outside vim
    if [ -z "$VIMRUNTIME" ]; then
        if [ -z "$result" ]; then
            common_tempfile result grep.XXXXXX.gitopenbuffer
        fi
        echo "$@" >> "$result"
    else
        echo "$@"
    fi
}

git_submodules() {
    git submodule status | awk 'BEGIN { ORS=" " } { print $2 }'
}

print_log ">> Grepping..."

use_git=0
if [ $USE_AG -eq 0 ] && [ $FORCE_GREP -eq 0 ]; then
    git branch > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        use_git=1
    fi
fi

if [ $use_git -eq 1 ]; then
    need_binaries awk
    grepcommand="git grep -I -n"
    grepcommandpost=""
    grepdirectories=". $(git_submodules)"
elif [ $USE_AG -eq 1 ]; then
    grepcommand="ag"
    grepcommandpost=""
    grepdirectories="."
else
    grepcommand="grep -r -n"
    grepcommandpost="*"
    grepdirectories="."
fi

if [ $IGNORE_CASE -eq 1 ]; then
    grepcommand="$grepcommand -i"
fi

common_tempfile output

finish() {
    if [ -e "$output" ]; then
        rm -f "$output"
    fi
    if [ -e "$result" ]; then
        rm -f "$result"
    fi
}

trap finish EXIT

grep_directory() {
    local dir=$1
    local last=$2
    if [[ ! -d "$dir" || "$dir" == ..* ]]; then
        # Skip submodule if the submodule directory doesn't exist
        # or the submodule path is not below our current path.
        return
    fi

    pushd "$dir" >/dev/null

    local path_prefix=
    if [ "$dir" != "." ]; then
        print_log ">> Grepping $last$dir..."
        path_prefix="${last//\//\\/}${dir//\//\\/}\/"
    fi

    $grepcommand -- "$search" $grepcommandpost | sed -e 's/\(.*:[0-9]\+\):/'"$path_prefix"'\1: /' >> "$output"


    if [[ $use_git -eq 1 && "$dir" != "." && -f .gitmodules ]]; then
        if [ -n "$last" ]; then
            last="$last/$dir/"
        else
            last="$dir/"
        fi
        for add_d in $(git_submodules); do
            grep_directory $add_d $last
        done
    fi

    popd >/dev/null
}

for d in $grepdirectories; do
    grep_directory $d
done

hits=$(wc -l < "$output")
if [ $hits -eq 0 ]; then
    exit 1
fi

# Going through all the lines with Bash is going
# to take a while...
if [ $hits -gt 1000 ]; then
    print_log ">> Sorting..."
fi

plural=""
if [ $hits -gt 1 ]; then
    plural="s"
fi
write_output "== ${hits} hit${plural} =="

set -f
old_filename=""
while IFS='' read -r line || [[ -n "$line" ]]; do
    filename="${line%%:*}"
    if [ "$filename" != "$old_filename" ]; then
        write_output ""
        old_filename="$filename"
    fi
    write_output "$line"
done < "$output"

print_log ""

case $EDITOR in
    gvim)
        EDITOR="gvim -f"
        ;&
    vim)
        if [ -z "$VIMRUNTIME" ]; then
            search_case=""
            if [ $IGNORE_CASE -eq 1 ]; then
                search_case="\c"
            fi
            $EDITOR "+/${search_case}${search//\//\\/}" "$result"
            exit $?
        fi
        ;;
    *)
        $EDITOR "$result"
        exit $?
        ;;
esac
