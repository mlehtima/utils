#!/bin/bash

# Works with any editor but best with vim :)
#
# Add to your .vimrc:
#
# au BufRead *.gitopenbuffer set filetype=gitopenbuffer
# autocmd FileType gitopenbuffer map <buffer> t ^<C-w>gF
# autocmd FileType gitopenbuffer map <buffer> j <Down> ^
# autocmd FileType gitopenbuffer map <buffer> k ^<Backspace><Backspace>^
# autocmd FileType gitopenbuffer map <buffer> q :q!<CR>
# command! -nargs=* -complete=shellcmd G tabnew | setlocal filetype=gitopenbuffer buftype=nofile bufhidden=hide noswapfile | r !vim-grep "<args>"
# nnoremap <C-F> :G <C-R><C-W><CR>
#
# With this configuration it is possible to invoke vim-grep from inside vim with command :G
# or by over any text under cursor with keyboard Ctrl+F

SCRIPTPATH="$(dirname "`readlink -f $0`")"
source "$SCRIPTPATH/common.sh" || exit 1

SCRIPT_VERSION="1"
expect_common_version 1
check_config EDITOR=less
need_binaries git grep sed mktemp

print_usage() {
    echo "$(basename $0) v$SCRIPT_VERSION"
    echo ""
    echo "  Configuration can be saved to config file to avoid using arguments,"
    echo "  in $COMMON_CONFIG_LOCATION"
    echo ""
    echo "  -h|--help               Print this help"
    echo "  -e|--editor             Override default editor used to view results"
    echo "                            (default: $EDITOR)"
    echo ""
    exit 0
}

args_missing() {
    case $1 in
        EDITOR)
            echo "fatal: value missing for editor"
            exit 1      ;;
        *)
            echo "fatal: no pattern given. $1"
            # same exit code as with git grep
            exit 128    ;;
    esac
}

handle_options \
    "default:       handle_options_store_to = search  " \
    "min-arguments: 1                                 " \
    "missing:       args_missing                      " \
    "-h,--help,     0,  print_usage                   " \
    "-e,--editor,   1,  EDITOR                        " \
    ---                                                 \
    "$@"

# Check editor after handling options to take override into account
need_binaries $EDITOR

result=""

print_log() {
    # only print when outside vim
    if [ -z "$VIMRUNTIME" ]; then
        echo $@
    fi
}

write_output() {
    # write to file when outside vim
    if [ -z "$VIMRUNTIME" ]; then
        if [ -z "$result" ]; then
            result="$(mktemp --tmpdir= grep.XXXXXX.gitopenbuffer)"
        fi
        echo "$@" >> "$result"
    else
        echo "$@"
    fi
}

git branch > /dev/null 2>&1
if [ $? -eq 0 ]; then
    grepcommand="git grep -n"
    grepcommandpost=""
else
    grepcommand="grep -r -n"
    grepcommandpost="*"
fi

output="$(mktemp --tmpdir= temp.XXXXXX)"

finish() {
    if [ -e "$output" ]; then
        rm -f "$output"
    fi
    if [ -e "$result" ]; then
        rm -f "$result"
    fi
}

trap finish EXIT

print_log -e -n "Grepping...\r"

$grepcommand -- "$search" $grepcommandpost | sed -e 's/\(.*:[0-9]\+\):/\1 :/' > "$output"

if [ "$(wc -l < "$output")" -eq 0 ]; then
    exit 1
fi

hits=$(wc -l < "$output")
plural=""
if [ $hits -gt 1 ]; then
    plural="s"
fi
write_output "== ${hits} hit${plural} =="

set -f
old_filename=""
while IFS='' read -r line || [[ -n "$line" ]]; do
    filename="${line%%:*}"
    if [ "$filename" != "$old_filename" ]; then
        write_output ""
        old_filename="$filename"
    fi
    write_output "$line"
done < "$output"

if [ "$EDITOR" == "vim" ]; then
    if [ -z "$VIMRUNTIME" ]; then
        vim "+/${search//\//\\/}" "$result"
        exit $?
    fi
else
    $EDITOR "$result"
    exit $?
fi
